/*
 * Copyright (c) 2016 Samuel Chinenyeze <sjchinenyeze@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package ui;

import analyser.*;
import collector.*;
import helper.*;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import monitor.*;

public class Orchestrator extends javax.swing.JFrame {

    private final Help help = new Help();
    private final File testPlan = new File("files/TestPlan.jmx");
    private final SimSettings sim = new SimSettings();
    private String markerLog, powerLog, metricsLog;
    private File zipfile = null;

    /**
     * Creates new form ServerMonitor
     */
    public Orchestrator() {
        initComponents();
        Helper.defaults(Orchestrator.this, new JPanel[]{jPanel1, jPanel2, jPanel3, jPanel4});
        Helper.btnIconAndToLabel(new JButton[]{btnSave, btnHelp, btnSetupSM, btnCleanupSM, btnSettings, btnStartSM,
            btnStopSM, btnOffload, btnStartMC, btnEditJmx, btnExtract, btnPlot, btnLogSelect, btnBin});
        Helper.btnMnemonicAndToolTip(Orchestrator.this, btnSave, btnBin, btnCleanupSM, btnExtract, btnHelp, btnSetupSM, btnLogSelect,
                btnStartMC, btnOffload, btnPlot, btnSettings, btnEditJmx, btnStartSM, btnStopSM);
        Helper.txtWrap(txtOutput);
        FileCreator.start(txtOutput); //create necessary files
        FileCreator.loadSettings(txtPemFile, txtHostIP, txtPort, txtUser, txtJmeterDir, txtBLPort, txtCMPort, txtOutput);//load settings
    }

    public void syncOutput(Document document) {
        txtOutput.setDocument(document);
        txtOutput.setCaretPosition(document.getLength());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPemFile = new javax.swing.JTextField();
        txtHostIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtJmeterDir = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtBLPort = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCMPort = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        chkMarker = new javax.swing.JCheckBox();
        chkMetrics = new javax.swing.JCheckBox();
        chkPower = new javax.swing.JCheckBox();
        btnLogSelect = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnSetupSM = new javax.swing.JButton();
        btnCleanupSM = new javax.swing.JButton();
        btnSettings = new javax.swing.JButton();
        btnStartSM = new javax.swing.JButton();
        btnStopSM = new javax.swing.JButton();
        btnEditJmx = new javax.swing.JButton();
        btnStartMC = new javax.swing.JButton();
        btnExtract = new javax.swing.JButton();
        btnPlot = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnOffload = new javax.swing.JButton();
        btnBin = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Beftigre Orchestrator");
        setMinimumSize(new java.awt.Dimension(710, 590));
        setPreferredSize(new java.awt.Dimension(710, 590));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Connection Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Host IP");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Port");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("User");

        txtPemFile.setEditable(false);
        txtPemFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPemFileMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Pem File");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtHostIP, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtUser))
                    .addComponent(txtPemFile, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPemFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHostIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        txtOutput.setRows(5);
        txtOutput.setText("Output Terminal\n---------------");
        jScrollPane1.setViewportView(txtOutput);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Test Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Jmeter Dir");

        txtJmeterDir.setEditable(false);
        txtJmeterDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtJmeterDirMouseClicked(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("BandwidthLatency Port");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("CPUMemory Port");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtJmeterDir, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBLPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCMPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtJmeterDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBLPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(txtCMPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Required Logs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N

        chkMarker.setText("Marker Log");
        chkMarker.setEnabled(false);
        chkMarker.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        chkMetrics.setText("Metrics Log");
        chkMetrics.setEnabled(false);
        chkMetrics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        chkPower.setText("Power Log");
        chkPower.setEnabled(false);
        chkPower.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        btnLogSelect.setText(" Select Logs");
        btnLogSelect.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLogSelect.setName("iLog"); // NOI18N
        btnLogSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLogSelectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLogSelectMouseExited(evt);
            }
        });
        btnLogSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkMarker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkPower)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkMetrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPower)
                    .addComponent(chkMarker)
                    .addComponent(chkMetrics)
                    .addComponent(btnLogSelect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSetupSM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSetupSM.setText(" Install setup files");
        btnSetupSM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetupSM.setName("iSetup"); // NOI18N
        btnSetupSM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSetupSMMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSetupSMMouseExited(evt);
            }
        });
        btnSetupSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetupSMActionPerformed(evt);
            }
        });

        btnCleanupSM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCleanupSM.setText(" Cleanup files");
        btnCleanupSM.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCleanupSM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCleanupSM.setName("iCleanup"); // NOI18N
        btnCleanupSM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCleanupSMMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCleanupSMMouseExited(evt);
            }
        });
        btnCleanupSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanupSMActionPerformed(evt);
            }
        });

        btnSettings.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSettings.setText(" Set simulation params");
        btnSettings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSettings.setName("iSettings"); // NOI18N
        btnSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSettingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSettingsMouseExited(evt);
            }
        });
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        btnStartSM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnStartSM.setText(" Start server monitors");
        btnStartSM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnStartSM.setName("iStart"); // NOI18N
        btnStartSM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStartSMMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStartSMMouseExited(evt);
            }
        });
        btnStartSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSMActionPerformed(evt);
            }
        });

        btnStopSM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnStopSM.setText(" Stop server monitors");
        btnStopSM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnStopSM.setName("iStop"); // NOI18N
        btnStopSM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStopSMMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStopSMMouseExited(evt);
            }
        });
        btnStopSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopSMActionPerformed(evt);
            }
        });

        btnEditJmx.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditJmx.setText(" Edit .jmx test plan");
        btnEditJmx.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditJmx.setName("iEdit"); // NOI18N
        btnEditJmx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditJmxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEditJmxMouseExited(evt);
            }
        });
        btnEditJmx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditJmxActionPerformed(evt);
            }
        });

        btnStartMC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnStartMC.setText(" Start metrics collector");
        btnStartMC.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnStartMC.setName("iStart"); // NOI18N
        btnStartMC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStartMCMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStartMCMouseExited(evt);
            }
        });
        btnStartMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartMCActionPerformed(evt);
            }
        });

        btnExtract.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnExtract.setText(" Extract results");
        btnExtract.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnExtract.setName("iExtract"); // NOI18N
        btnExtract.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExtractMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExtractMouseExited(evt);
            }
        });
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractActionPerformed(evt);
            }
        });

        btnPlot.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPlot.setText(" Plot");
        btnPlot.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnPlot.setName("iPlot"); // NOI18N
        btnPlot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPlotMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPlotMouseExited(evt);
            }
        });
        btnPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlotActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel7.setText("Server Monitor-------------------");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel8.setText("Metrics Collector-----------------");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel9.setText("Full-tier Analyser-----------------");

        btnOffload.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnOffload.setText(" Setup offload components");
        btnOffload.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOffload.setName("iOffload"); // NOI18N
        btnOffload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnOffloadMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnOffloadMouseExited(evt);
            }
        });
        btnOffload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnPlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnExtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnStartMC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnEditJmx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnStopSM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnStartSM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnSetupSM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCleanupSM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnOffload, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCleanupSM, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSetupSM, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOffload, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStartSM, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStopSM, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditJmx, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStartMC, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExtract, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPlot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        btnBin.setName("iBin"); // NOI18N
        btnBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinActionPerformed(evt);
            }
        });

        btnSave.setName("iSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnHelp.setName("iHelp"); // NOI18N
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBin, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)))
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(btnBin, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSMActionPerformed
        String throttle_type = SimSettings.settingsMap.get("throttle_type");
        int cpu_value = 0, mem_value = 0, time_value = 0;
        try {
            cpu_value = Integer.parseInt(SimSettings.settingsMap.get("cpu_value"));
            mem_value = Integer.parseInt(SimSettings.settingsMap.get("mem_value"));
            time_value = Integer.parseInt(SimSettings.settingsMap.get("time_value"));
        } catch (NumberFormatException nfe) {
            Helper.display(txtOutput, "Stress settings not registered.");
        }
        try {
            if (throttle_type.equals("default")) {
                System.out.println("default");
                String throttle_value = SimSettings.settingsMap.get("throttle_value");
                Helper.display(txtOutput, "Throttle type and value: " + throttle_type + " " + throttle_value);
                Helper.display(txtOutput, "Stress: cpu, mem, time: " + cpu_value + " " + mem_value + " " + time_value);
                server().stress(cpu_value, mem_value, time_value);
                server().start("default", throttle_value, null, null, null); //monitor start with fixed; contains: default, null and fixed options
                // Setup create metrics file for default-----------
            } else if (throttle_type.equals("custom")) {
                System.out.println("custom");
                String bandwidth = SimSettings.settingsMap.get("bandwidth");
                String bandwidthType = SimSettings.settingsMap.get("bandwidthType");
                String latency = SimSettings.settingsMap.get("latency");
                Helper.display(txtOutput, "Throttle type:" + throttle_type + " bandwidth:" + bandwidth + bandwidthType + " latency:" + latency + "ms");
                Helper.display(txtOutput, "Stress: cpu, mem, time: " + cpu_value + " " + mem_value + " " + time_value);
                server().stress(cpu_value, mem_value, time_value);
                server().start("custom", null, bandwidth, bandwidthType, latency); //monitor start without random throttle
                createSimLog(bandwidth, bandwidthType, latency, cpu_value, mem_value);
            }
            //if no throttle type is selected
        } catch (NullPointerException npe) {
            System.out.println("npe");
            server().stress(cpu_value, mem_value, time_value);
            server().start("default", null, null, null, null); //monitor start with default throttle settings
            Helper.display(txtOutput, "Monitor started with no throttle and no CPU settings");
            createSimLog("0", "", "0", cpu_value, mem_value);
        }
    }//GEN-LAST:event_btnStartSMActionPerformed

    private void btnSetupSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetupSMActionPerformed
        int portBL = 1;
        int portCM = 2;
        try {
            portBL = Integer.parseInt(txtBLPort.getText());
            portCM = Integer.parseInt(txtCMPort.getText());
            Helper.display(txtOutput, "BandwidthLatencyServer port: " + portBL + "\nCPUMemoryServer port: " + portCM);
            //create BLS and CMS files
            Helper.display(txtOutput, BandwidthLatencyServer.create(portBL));
            Helper.display(txtOutput, CPUMemoryAvailServer.create(portCM));
            //setup
            server().setUp();
        } catch (NumberFormatException ex) {
            Helper.display(txtOutput, "Default ports are being used.\nBandwidthLatencyServer port: " + portBL + "\nCPUMemoryServer port: " + portCM);
            //create BLS and CMS files
            Helper.display(txtOutput, BandwidthLatencyServer.create(portBL));
            Helper.display(txtOutput, CPUMemoryAvailServer.create(portCM));
            //setup
            server().setUp();
        }
    }//GEN-LAST:event_btnSetupSMActionPerformed

    private void btnStopSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopSMActionPerformed
        server().stop();
    }//GEN-LAST:event_btnStopSMActionPerformed

    private void btnCleanupSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanupSMActionPerformed
        server().cleanUp();
    }//GEN-LAST:event_btnCleanupSMActionPerformed

    private void btnBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinActionPerformed
        Helper.displayReset(txtOutput);
    }//GEN-LAST:event_btnBinActionPerformed

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        if (sim.getViewNotifier() == null) {
            sim.setViewNotifier("displaying");
            sim.setBounds(this.getBounds());
            sim.setSize(354, 338);
            sim.txtOutput = txtOutput;
            sim.setVisible(true);
        }
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void txtPemFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPemFileMouseClicked
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("."));
            chooser.setDialogTitle("Select EC2 pem file");
            chooser.setFileFilter(new FileNameExtensionFilter("Pem File", "pem"));
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.showOpenDialog(this); //this: disiplays the Beftigre-icon
            File file = chooser.getSelectedFile();
            txtPemFile.setText(file.getAbsolutePath());
        } catch (Exception ex) {
            Helper.display(txtOutput, "Error with file.");
        }
    }//GEN-LAST:event_txtPemFileMouseClicked

    private void txtJmeterDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtJmeterDirMouseClicked
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("."));
            chooser.setDialogTitle("Select Jmeter directory");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.showOpenDialog(this); //this: disiplays the Beftigre-icon
            String filepath = chooser.getSelectedFile().getAbsolutePath();
            txtJmeterDir.setText(filepath);
        } catch (Exception ex) {
            Helper.display(txtOutput, "Error with file.");
        }
    }//GEN-LAST:event_txtJmeterDirMouseClicked

    private void btnEditJmxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditJmxActionPerformed
        try {
            EditTestPlan etp = new EditTestPlan();
            etp.setBounds(this.getBounds());
            etp.setSize(500, 400);
            etp.txtOutput = txtOutput;
            etp.setVisible(true);
        } catch (Exception ex) {
            Helper.display(txtOutput, "Error with file.");
        }
    }//GEN-LAST:event_btnEditJmxActionPerformed

    private void btnStartMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartMCActionPerformed
        int portBL;
        int portCM;
        try {
            portBL = Integer.parseInt(txtBLPort.getText());
            portCM = Integer.parseInt(txtCMPort.getText());
            Helper.display(txtOutput, "BandwidthLatencyClient port: " + portBL + "\nCPUMemoryClient port: " + portCM);
        } catch (NumberFormatException ex) {
            portBL = 1;
            portCM = 2;
            Helper.display(txtOutput, "Default ports are being used.\nBandwidthLatencyClient port: " + portBL + "\nCPUMemoryClient port: " + portCM);
        }
        //start BandwidthLatencyClient && CPUMemoryAvailClient
        String bandwidthLatency = BandwidthLatencyClient.start(portBL);
        String cpuMemory = CPUMemoryAvailClient.start(portCM);
        if (!cpuMemory.contains("Error") && !bandwidthLatency.contains("Error")) {
            String bandwidth = bandwidthLatency.split(" ")[0];
            String latency = bandwidthLatency.split(" ")[1];
            String cloudcpu = cpuMemory.split(" ")[0];
            String cloudmem = cpuMemory.split(" ")[1];
            createMetricsLog(bandwidth, latency, cloudcpu, cloudmem);
        } else {
            Helper.display(txtOutput, "Error: Could not retrieve Bandwidth and Latency.\nError: Could not retrieve %CPU and %Memory avail.");
        }
    }//GEN-LAST:event_btnStartMCActionPerformed

    private void btnLogSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogSelectActionPerformed
        //uncheck all checkbx after graph and result
        try {
            JFileChooser chooser = new JFileChooser();
            //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Beftigre-icon.png")));
            chooser.setDialogTitle("Select Log file");
            chooser.setFileFilter(new FileNameExtensionFilter("Log File", "log"));
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setMultiSelectionEnabled(true);
            chooser.setCurrentDirectory(new File("./logs"));
            chooser.showOpenDialog(this); //this: disiplays the Beftigre-icon
            File[] files = chooser.getSelectedFiles();
            if (files.length == 3) {
                int errorCounter = 0;
                String mrk = "", pwr = "", met = "";
                for (File file : files) {
                    String filepath = file.getAbsolutePath();
                    if (file.getName().toLowerCase().contains("markerlog")) {
                        mrk = filepath;
                        chkMarker.setSelected(true);
                        Helper.display(txtOutput, file.getAbsolutePath() + " loaded for Marker Log.");
                    } else if (file.getName().toLowerCase().contains("powerlog")) {
                        pwr = filepath;
                        chkPower.setSelected(true);
                        Helper.display(txtOutput, file.getAbsolutePath() + " loaded for Power Log.");
                    } else if (file.getName().toLowerCase().contains("metricslog")) {
                        met = filepath;
                        chkMetrics.setSelected(true);
                        Helper.display(txtOutput, file.getAbsolutePath() + " loaded for Metrics Log.");
                    } else {
                        errorCounter++;
                        Helper.display(txtOutput, file.getAbsolutePath() + " was not identified as a Beftigre log."
                                + "\nEnsure it follows the right file naming convention.");
                    }
                }
                if (errorCounter == 0) {
                    markerLog = mrk;
                    powerLog = pwr;
                    metricsLog = met;
                } else {
                    Helper.display(txtOutput, "Reload all logs. First, ensure the right file naming convention is followed.");
                }
            } else {
                Helper.display(txtOutput, "All required files were not loaded.");
            }
        } catch (Exception ex) {
            Helper.display(txtOutput, "Error with file.");
        }
    }//GEN-LAST:event_btnLogSelectActionPerformed

    private void btnExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractActionPerformed
        analyser().extract();
    }//GEN-LAST:event_btnExtractActionPerformed

    private void btnPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlotActionPerformed
        JList list = new JList(new String[]{"mobile power", "mobile elapsed time", "cloud CPU usage", "cloud memory usage"/*, "server simulation"*/});
        int result = JOptionPane.showOptionDialog(null, list, "Plot Options", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
        if (list.getSelectedIndices().length <= 0 || result == -1) {
            Helper.display(txtOutput, "Please select a plot option.");
        } else {
            //just for debugging
            //System.out.println(Arrays.toString(list.getSelectedIndices()));
            ArrayList<String> items = new ArrayList<>();
            String selected = "";
            if (Arrays.toString(list.getSelectedIndices()).contains("0")) {
                items.add("PowerLog");
                selected += " Mobile Power;";
            }
            if (Arrays.toString(list.getSelectedIndices()).contains("1")) {
                items.add("AppLog");
                selected += " Mobile Elapsed Time;";
            }
            if (Arrays.toString(list.getSelectedIndices()).contains("2")) {
                items.add("CPULog");
                selected += " Server CPU;";
            }
            if (Arrays.toString(list.getSelectedIndices()).contains("3")) {
                items.add("MemLog");
                selected += " Server Memory;";
            }
            /*if (Arrays.toString(list.getSelectedIndices()).contains("4")) {
                items.add("SimLog");
                selected += " Network Simulation;";
            }*/
            Helper.display(txtOutput, "Selected: " + selected);
            File file = Plotter.plot(items, selected, txtOutput);
            GraphViewer gv = new GraphViewer();
            gv.view(file);
            gv.setVisible(true);
        }
    }//GEN-LAST:event_btnPlotActionPerformed

    private void btnOffloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffloadActionPerformed
        String[] options = new String[]{"Start"};
        JButton btnZip = new JButton("Select zip to upload");
        JCheckBox chk = new JCheckBox("Enter java start command:", true);
        JTextField txtCommand = new JTextField();
        Object[] object = {btnZip, " ", chk, txtCommand};
        btnZip.addActionListener((ActionEvent evt1) -> {
            Helper.display(txtOutput, "Uploading...");
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Select Zip file");
            chooser.addChoosableFileFilter(new Helper.ExtensionFileFilter(new String[]{".zip"}, "Offloader Zip (*.zip)"));
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setCurrentDirectory(new File("./files")); //remove
            chooser.showOpenDialog(Orchestrator.this); //this: disiplays the Beftigre-icon
            zipfile = chooser.getSelectedFile();
            Helper.display(txtOutput, zipfile.getAbsolutePath() + " selected.");
        });
        chk.addActionListener((ActionEvent evt1) -> {
            if (chk.isSelected()) {
                txtCommand.setEnabled(true);
            } else {
                txtCommand.setEnabled(false);
            }
        });
        try {
            int response = JOptionPane.showOptionDialog(null, object, "Offloaded components", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[0]);
            String command = txtCommand.getText();
            //upload and start:: start only:: upload only
            if (response == 0 && chk.isSelected() && zipfile != null && command.length() > 2) {
                Helper.display(txtOutput, "Uploading...");
                server().uploadZip(zipfile);
                Helper.display(txtOutput, "Starting...");
                server().sendCommand("sudo nohup java " + command + " >> /tmp/out.txt &");
                Helper.display(txtOutput, "Start command successfully issued.");
            } else if (response == 0 && chk.isSelected() && zipfile == null && command.length() > 2) {
                Helper.display(txtOutput, "Starting...");
                server().sendCommand("sudo nohup java " + command + " >> /tmp/out.txt &");
                Helper.display(txtOutput, "Start command successfully issued.");
            } else if (response == 0 && !chk.isSelected() && zipfile != null) {
                Helper.display(txtOutput, "Uploading...");
                server().uploadZip(zipfile);
            } else {
                Helper.display(txtOutput, "A required field was missing.");
            }
        } catch (HeadlessException | NumberFormatException ex) {
            Helper.display(txtOutput, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnOffloadActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String error = "";
        //validate entries
        error += FileCreator.validateFile(txtPemFile.getText(), "Pem File");
        error += FileCreator.validateString(txtHostIP.getText(), 8, "Host IP");
        error += FileCreator.validateInt(txtPort.getText(), "Port");
        error += FileCreator.validateString(txtUser.getText(), 4, "User");
        error += FileCreator.validateFile(txtJmeterDir.getText(), "Jmeter Dir");
        error += FileCreator.validateInt(txtBLPort.getText(), "BL Port");
        error += FileCreator.validateInt(txtCMPort.getText(), "CM Port");
        if (error.isEmpty()) {
            BufferedWriter bw;
            try {
                bw = new BufferedWriter(new FileWriter(new File("files/settings.befor"), false));
                bw.write("PemFile;" + txtPemFile.getText() + "\n");
                bw.write("HostIP;" + txtHostIP.getText() + "\n");
                bw.write("Port;" + txtPort.getText() + "\n");
                bw.write("User;" + txtUser.getText() + "\n");
                bw.write("JmeterDir;" + txtJmeterDir.getText() + "\n");
                bw.write("BLPort;" + txtBLPort.getText() + "\n");
                bw.write("CMPort;" + txtCMPort.getText());
                bw.flush();
                bw.close();
                Helper.display(txtOutput, "Settings file saved successfully.");
            } catch (IOException ex) {
                System.out.println("Error: " + ex.getMessage());
            }
        } else {
            Helper.display(txtOutput, error);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        if (help.getViewNotifier() == null) {
            help.setBounds(this.getBounds());
            help.order();
            help.setVisible(true);
        }
    }//GEN-LAST:event_btnHelpActionPerformed

    private EC2Server server() {
        String pemFile = txtPemFile.getText();
        String user = txtUser.getText();
        String ip = txtHostIP.getText();
        int port = Integer.parseInt(txtPort.getText());
        return new EC2Server(pemFile, user, ip, port, txtOutput);
    }

    private void createMetricsLog(String bandwidth, String latency, String cloudcpu, String cloudmem) {
        BufferedWriter bw;
        try {
            String metricsLogFile = "logs/MetricsLog_" + System.currentTimeMillis() + ".log";
            //Create new MetricsLog with metrics data
            bw = new BufferedWriter(new FileWriter(metricsLogFile));
            bw.write("bandwidth " + bandwidth + "\n" + "latency " + latency + "\n" + "cloudCPU " + cloudcpu + "\n" + "cloudMemory " + cloudmem + "\n");
            bw.flush();
            bw.close();
            Helper.display(txtOutput, "MetricsLog created.");
            Helper.display(txtOutput, "Bandwidth and Latency received.\n%CPU and %Memory avail. received.");

            //Start resource usage collection
            String jmeterHome = txtJmeterDir.getText();
            String host = new JmxReader(testPlan).getServer();  //get from TestPlan.jmx
            PerfmonCollector.start(jmeterHome, host, metricsLogFile, testPlan, txtOutput);
        } catch (IOException ex) {
            System.out.println("Error " + ex.getMessage());
        }
    }

    private void createSimLog(String bandwidth, String bandwidthType, String latency, int cpuload, int memload) {
        try {
            //Create new SimLog with simulation settings
            String simLog = "logs/SimLog_" + System.currentTimeMillis() + ".log";
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(simLog))) {
                bw.write("bandwidth " + bandwidth + bandwidthType + "\n" + "latency " + latency + "ms\n" + "cpuload " + cpuload + "\n" + "memoryload " + memload + "\n");
                bw.flush();
            }
            Helper.display(txtOutput, "SimLog created.");
        } catch (IOException ex) {
            Helper.display(txtOutput, "Error: " + ex.getMessage());
        }
    }

    private Summariser analyser() {
        return new Summariser(markerLog, powerLog, metricsLog, txtOutput);
    }

    private void btnSetupSMMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSetupSMMouseEntered
        Helper.btnHover(btnSetupSM);
    }//GEN-LAST:event_btnSetupSMMouseEntered

    private void btnSetupSMMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSetupSMMouseExited
        Helper.btnToLabel(btnSetupSM);
    }//GEN-LAST:event_btnSetupSMMouseExited

    private void btnCleanupSMMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCleanupSMMouseEntered
        Helper.btnHover(btnCleanupSM);
    }//GEN-LAST:event_btnCleanupSMMouseEntered

    private void btnCleanupSMMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCleanupSMMouseExited
        Helper.btnToLabel(btnCleanupSM);
    }//GEN-LAST:event_btnCleanupSMMouseExited

    private void btnSettingsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettingsMouseEntered
        Helper.btnHover(btnSettings);
    }//GEN-LAST:event_btnSettingsMouseEntered

    private void btnSettingsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettingsMouseExited
        Helper.btnToLabel(btnSettings);
    }//GEN-LAST:event_btnSettingsMouseExited

    private void btnStartSMMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartSMMouseEntered
        Helper.btnHover(btnStartSM);
    }//GEN-LAST:event_btnStartSMMouseEntered

    private void btnStartSMMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartSMMouseExited
        Helper.btnToLabel(btnStartSM);
    }//GEN-LAST:event_btnStartSMMouseExited

    private void btnStopSMMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStopSMMouseEntered
        Helper.btnHover(btnStopSM);
    }//GEN-LAST:event_btnStopSMMouseEntered

    private void btnStopSMMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStopSMMouseExited
        Helper.btnToLabel(btnStopSM);
    }//GEN-LAST:event_btnStopSMMouseExited

    private void btnOffloadMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOffloadMouseEntered
        Helper.btnHover(btnOffload);
    }//GEN-LAST:event_btnOffloadMouseEntered

    private void btnOffloadMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOffloadMouseExited
        Helper.btnToLabel(btnOffload);
    }//GEN-LAST:event_btnOffloadMouseExited

    private void btnEditJmxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditJmxMouseEntered
        Helper.btnHover(btnEditJmx);
    }//GEN-LAST:event_btnEditJmxMouseEntered

    private void btnEditJmxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditJmxMouseExited
        Helper.btnToLabel(btnEditJmx);
    }//GEN-LAST:event_btnEditJmxMouseExited

    private void btnStartMCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMCMouseEntered
        Helper.btnHover(btnStartMC);
    }//GEN-LAST:event_btnStartMCMouseEntered

    private void btnStartMCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMCMouseExited
        Helper.btnToLabel(btnStartMC);
    }//GEN-LAST:event_btnStartMCMouseExited

    private void btnExtractMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExtractMouseEntered
        Helper.btnHover(btnExtract);
    }//GEN-LAST:event_btnExtractMouseEntered

    private void btnExtractMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExtractMouseExited
        Helper.btnToLabel(btnExtract);
    }//GEN-LAST:event_btnExtractMouseExited

    private void btnPlotMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlotMouseEntered
        Helper.btnHover(btnPlot);
    }//GEN-LAST:event_btnPlotMouseEntered

    private void btnPlotMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlotMouseExited
        Helper.btnToLabel(btnPlot);
    }//GEN-LAST:event_btnPlotMouseExited

    private void btnLogSelectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogSelectMouseEntered
        Helper.btnHover(btnLogSelect);
    }//GEN-LAST:event_btnLogSelectMouseEntered

    private void btnLogSelectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogSelectMouseExited
        Helper.btnToLabel(btnLogSelect);
    }//GEN-LAST:event_btnLogSelectMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orchestrator.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        if (args.length > 0 && args[0].equals("befor")) {
            String command = "";
            System.out.println("Befor started.");
            FileCreator.start(null); //create necessary files
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            while (true) {
                try {
                    System.out.print("Befor:~$ ");
                    command = br.readLine();
                    if (command.trim().length() > 0) {
                        Cmd.in(command);
                    }
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
                if (command.equals("exit")) {
                    System.out.println("Befor exited.");
                    System.exit(1);
                }
            }
        } else {
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> {
                new Orchestrator().setVisible(true);
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBin;
    private javax.swing.JButton btnCleanupSM;
    private javax.swing.JButton btnEditJmx;
    private javax.swing.JButton btnExtract;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnLogSelect;
    private javax.swing.JButton btnOffload;
    private javax.swing.JButton btnPlot;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSettings;
    private javax.swing.JButton btnSetupSM;
    private javax.swing.JButton btnStartMC;
    private javax.swing.JButton btnStartSM;
    private javax.swing.JButton btnStopSM;
    private javax.swing.JCheckBox chkMarker;
    private javax.swing.JCheckBox chkMetrics;
    private javax.swing.JCheckBox chkPower;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtBLPort;
    private javax.swing.JTextField txtCMPort;
    private javax.swing.JTextField txtHostIP;
    private javax.swing.JTextField txtJmeterDir;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtPemFile;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
